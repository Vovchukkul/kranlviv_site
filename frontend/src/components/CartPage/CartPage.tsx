import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import "./CartPage.scss";
import emailjs from "emailjs-com";
import Select from "react-select";
import axios from "axios";

const NOVA_POSHTA_API_KEY = "9d96f6c88387dfafd389fcf760375532"; // üîπ –ü—ñ–¥—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π API –∫–ª—é—á –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏

export const CartPage: React.FC = () => {
  const location = useLocation();
  const product = location.state?.product;
  const [quantity, setQuantity] = useState(1);
  const [cities, setCities] = useState<{ label: string; value: string }[]>([]);
  const [warehouses, setWarehouses] = useState<{ label: string; value: string }[]>([]);
  const [selectedCity, setSelectedCity] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: "",
    city: "",
    novaPoshta: "",
  });

  if (!product) {
    return <h2>–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üòï</h2>;
  }

  // üèô –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
  useEffect(() => {
    axios
      .post("https://api.novaposhta.ua/v2.0/json/", {
        apiKey: NOVA_POSHTA_API_KEY,
        modelName: "Address",
        calledMethod: "getCities",
        methodProperties: {},
      })
      .then((response) => {
        if (response.data.success) {
          const cityOptions = response.data.data.map((city: any) => ({
            label: city.Description,
            value: city.Ref,
          }));
          setCities(cityOptions);
        } else {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ç:", response.data.errors);
        }
      })
      .catch((error) => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ API –º—ñ—Å—Ç:", error));
  }, []);

  // üì¶ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞
  useEffect(() => {
    if (selectedCity) {
      axios
        .post("https://api.novaposhta.ua/v2.0/json/", {
          apiKey: NOVA_POSHTA_API_KEY,
          modelName: "AddressGeneral",
          calledMethod: "getWarehouses",
          methodProperties: { CityRef: selectedCity },
        })
        .then((response) => {
          if (response.data.success) {
            const warehouseOptions = response.data.data.map((wh: any) => ({
              label: wh.Description,
              value: wh.Ref,
            }));
            setWarehouses(warehouseOptions);
          } else {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å:", response.data.errors);
          }
        })
        .catch((error) => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ API –≤—ñ–¥–¥—ñ–ª–µ–Ω—å:", error));
    }
  }, [selectedCity]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleCityChange = (selectedOption: any) => {
    setSelectedCity(selectedOption.value);
    setFormData({ ...formData, city: selectedOption.label });
    setWarehouses([]); // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º—ñ—Å—Ç–∞
  };

  const handleWarehouseChange = (selectedOption: any) => {
    setFormData({ ...formData, novaPoshta: selectedOption.label });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    const orderDetails = {
      ...formData,
      productName: product.name,
      price: product.price * quantity,
      quantity,
    };

    emailjs
      .send(
        "service_ova200g", // üîπ EmailJS service ID
        "template_ph6m21j", // üîπ EmailJS template ID
        orderDetails,
        "sA3M3ggMlrct6XaTb" // üîπ EmailJS user ID
      )
      .then(() => alert("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!"))
      .catch(() => alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ!"));
  };

  return (
    <div className="cart_page">
      <h1>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>
      <div className="cart_item">
        <img src={product.images[0]} alt={product.name} />
        <div>
          <h2>{product.name}</h2>
          <p>{product.price} –≥—Ä–Ω</p>
          <input
            type="number"
            min="1"
            value={quantity}
            onChange={(e) => setQuantity(Number(e.target.value))}
          />
          <h3>–°—É–º–∞: {product.price * quantity} –≥—Ä–Ω</h3>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="order_form">
        <input type="text" name="name" placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è" onChange={handleChange} required />
        <input type="tel" name="phone" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" onChange={handleChange} required />
        <input type="email" name="email" placeholder="Email (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)" onChange={handleChange} />

        {/* –í–∏–±—ñ—Ä –º—ñ—Å—Ç–∞ */}
        <Select
          options={cities}
          placeholder="–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ"
          onChange={handleCityChange}
          isSearchable
          required
        />

        {/* –í–∏–±—ñ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞) */}
        <Select
          options={warehouses}
          placeholder="–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏"
          onChange={handleWarehouseChange}
          isSearchable
          isDisabled={!selectedCity}
          required
        />

        <button type="submit" className="buy_button">–ó–∞–º–æ–≤–∏—Ç–∏</button>
      </form>
    </div>
  );
};
