require("dotenv").config();
const mongoose = require("mongoose");
const fs = require("fs");

const MONGO_URI = process.env.MONGO_URI;

mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB"))
  .catch(err => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ MongoDB:", err));

const Product = mongoose.model("Product", new mongoose.Schema({
  id: Number,
  name: String,
  category: String,
  price: Number,
  images: [String],
  description: String
}));

const products = JSON.parse(fs.readFileSync("prom_products.json", "utf-8"));

const importData = async () => {
  try {
    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º (—è–∫—â–æ —Ç—Ä–µ–±–∞)
    await Product.deleteMany();
    console.log("üóë –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ñ —Ç–æ–≤–∞—Ä–∏...");

    await Product.insertMany(products);
    console.log("‚úÖ –¢–æ–≤–∞—Ä–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ!");

    mongoose.connection.close();
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:", error);
    mongoose.connection.close();
  }
};

importData();
