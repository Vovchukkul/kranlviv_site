const axios = require("axios");
const fs = require("fs");

const API_KEY = "677e49cffbec9eb98551149805b570da77a0eb8b";
const API_URL = "https://my.prom.ua/api/v1/products/list";
const OUTPUT_FILE = "prom_products.json";

// üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è HTML-—Ç–µ–≥—ñ–≤
function stripHtml(html) {
  return html
    .replace(/<\/?[^>]+(>|$)/g, "") // –í–∏–¥–∞–ª—è—î –≤—Å—ñ —Ç–µ–≥–∏ <p>, <strong> —Ç–æ—â–æ
    .replace(/&nbsp;/g, " ") // –í–∏–¥–∞–ª—è—î HTML-–µ–Ω–∫–æ–¥–æ–≤–∞–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏
    .replace(/&[#0-9a-z]+;/gi, ""); // –í–∏–¥–∞–ª—è—î –≤—Å—ñ HTML-–µ–Ω–∫–æ–¥–æ–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏
}

async function fetchAllProducts() {
  let allProducts = [];
  let page = 1;
  let totalPages = 1;

  console.log("‚è≥ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Prom.ua...");

  while (page <= totalPages) {
    try {
      console.log(`üìÑ –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É ${page}...`);

      const response = await axios.get(`${API_URL}?limit=100&page=${page}`, {
        headers: {
          "Authorization": `Bearer ${API_KEY}`,
          "Content-Type": "application/json"
        }
      });

      console.log(response.data)

      if (response.data.products && response.data.products.length > 0) {
        const products = response.data.products.map(product => ({
          id: product.id,
          name: product.name,
          category: product.group?.name || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
          price: product.price,
          images: product.images?.length > 0 
            ? [product.main_image, ...product.images.map(img => img.url)] 
            : [product.main_image || "–ù–µ–º–∞—î —Ñ–æ—Ç–æ"],
          description: stripHtml(product.description || ""), // üõ† –û—á–∏—â–µ–Ω–Ω—è HTML
        }));

        allProducts = [...allProducts, ...products];

        totalPages = response.data.last_page || 1;
        page++;
      } else {
        console.log("‚ùå –ù–µ–º–∞—î –±—ñ–ª—å—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è.");
        break;
      }

    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤:", error.response?.data || error.message);
      break;
    }
  }

  fs.writeFileSync(OUTPUT_FILE, JSON.stringify(allProducts, null, 2));
  console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ ${allProducts.length} —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É ${OUTPUT_FILE}`);
}

fetchAllProducts();
